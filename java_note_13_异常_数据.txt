e.getMessage()、getLocalizedMessage()、printStackTrace()


？ e.printStackTrace(); 可以追寻到出错的位置？？
java.lang.Exception: My Exception
	at com.cmb.bus.product.util.Test.main(Test.java:9)






---------------------

! 自定义类 vs 自定义方法？？

class Demo  
{  
	...
}  

public class Test {
	public static void main(String[] args){
		Demo d = new Demo();  

		deleteDir(new File("./test"));
	}
	public static boolean deleteDir(File dir) {
		...
	}

}







---------------------

catch (ArithmeticException e)  
{  
    System.out.println(e.toString());  
}  
catch (ArrayIndexOutOfBoundsException e)  
{  
    System.out.println(e.toString());  
}  







---------------------

？ 为什么会执行两遍 "都已执行完毕" ？？

public static void main(String[] argv) {
	      new Test().doTheWork();
	   }
   public void doTheWork() {
      Object o = null;
      for (int i=0; i<5; i++) {
         try {
            o = makeObj(i);
         }
         catch (IllegalArgumentException e) {
            System.err.println("Error: ("+ e.getMessage()+").");
        return;               // 这里会跳出循环
     }
     finally {
        System.err.println("都已执行完毕");
            if (o==null)
            System.exit(0);
        }
        System.out.println(o); 
      }
   }
   public Object makeObj(int type) throws IllegalArgumentException {
      if (type == 1) throw new IllegalArgumentException("不是指定的类型： " + type);
      return new Object();
   }







---------------------

？ 怎么让线程 sleep 后重新启动？？

？ Caught it 没有捕获到...

class MyThread extends Thread{
    public void run(){
        System.out.println("Throwing in " +"MyThread");
        throw new RuntimeException();
    }
}

public class Test {
	   public static void main(String[] argv) {
		   MyThread t = new MyThread();
	        t.start();
	        int n = 0;
	        try{
	            Thread.sleep(1000);
	        }
	        catch (Exception x){
	            System.out.println("Caught it" + x);
	        }
	        System.out.println("Exiting main");
	   }

}









---------------------

？ 说明我对 while 操作符不熟...

？ while (!theStack.isEmpty()) 
-- [+, *, ,,,,,,,] 什么时候会变 empty ？？难道 theStack.pop() 会消除 theStack 里面的值吗？？


Java 实例 – 利用堆栈将中缀表达式转换成后缀表达式 | 菜鸟教程
http://www.runoob.com/java/data-intopost.html







---------------------

* stack（栈）感觉有点像数组；

[42, 66, 99]






---------------------

* LinkedList
-- addFirst("0")、addLast("6")、getFirst()、getLast()、removeFirst()、indexOf()、lastIndesOf()
-- set(2, "M");

1, 2, 3, 4, 5
0, 1, 2, 3, 4, 5
0, 1, 2, 3, 4, 5, 6




？ subList()、clear()
-- LinkedList.subList(2, 4).clear();

[1, 8, 6, 4, 5]
[1, 8, 5]







---------------------

Collections.sort(v);
Collections.binarySearch(v, "D");
Collections.swap();
Collections.reverse(l);
size()
Collections.shuffle(list); // 打乱顺序
collection.remove(str2);
Collections.unmodifiableList(list)
Collections.replaceAll(list, "one", "hundrea");  // 用后面的替换掉前面的；
Collections.indexOfSubList(list, sublist));      // 查找子列表位置
Collections.lastIndexOfSubList(list, sublist)    // 倒序



？ 看看是不是 Vector 这种类型才可以用？？



Collections.rotate(list, 3);
-- List :[one, Two, three, Four, five, six]
-- rotate: [Four, five, six, one, Two, three]




---------------------

？ 就这样可以了？？不用 stackArray[top--].remove()？？

public long pop() {
      return stackArray[top--];
}

-- 利用 stack 来实现 reverse








---------------------

【TreeMap】

-- keySet()、values()、get(5)、firstKey()、lastKey()、








---------------------

？ list 可以直接 print，array 只能循环 print？？






















---------------------

* Queue

-- 允许在表的前端进行删除操作，而在表的后端进行插入操作。
-- 想象成排队就行了。

poll()       //返回第一个元素，并在队列中删除
element()    //返回第一个元素 
peek()       //同上

？ 那为什么要写两个方法呢？？







---------------------

【set】

-- add()、
-- Collections.min(set)、Collections.max(set)

Set<String> set = new TreeSet<String>();







---------------------

HashMap< String, String> hMap = new HashMap< String, String>();
hMap.put("1", "1st");
hMap.put("2", "2nd");
hMap.put("3", "3rd");

Collection cl = hMap.values();  // Collection ？？
Iterator itr = cl.iterator();   // Iterator ？？
while (itr.hasNext()) {
	System.out.println(itr.next());
}


3rd
2nd
1st






？ collection 不能直接输出 value，要通过 collection.iterator() 来输出？？

collection.add(str1);    
collection.add(str2);   
collection.add(str3);   
collection.add(str4);
iterator = collection.iterator();   




！注意上面是 hashMap，这里是 hashSet

HashSet collection = new HashSet ();
String str1 = "Yellow", str2 = "White", str3 = "Green", str4 = "Blue";  
Iterator iterator;
collection.add(str1);    
collection.add(str2);   
collection.add(str3);   
collection.add(str4);
System.out.print("集合数据: ");  
iterator = collection.iterator();     
while (iterator.hasNext()){
	System.out.print(iterator.next() + " ");  
}
System.out.println();









---------------------

从Collection接口延伸出的List、Set和以键值对形式作存储的Map类型的集合






---------------------

？ 为什么输出的顺序跟预期的不一样？？

  Set<String> set = new HashSet<String>();
  set.add("JAVA");
  set.add("C");
  set.add("C++");
  
  // 重复数据添加失败
  set.add("JAVA");   // 所以 set 是不能重复的咯
  
  set.add("JAVASCRIPT");
 
      // 使用iterator遍历set集合
  Iterator<String> it = set.iterator();
  while (it.hasNext()) {
     String value = it.next();
     System.out.println(value);
  }
  
  // 使用增强for循环遍历set集合
  for(String s: set){
     System.out.println(s);
  }



C
JAVASCRIPT
JAVA
C++

C
JAVASCRIPT
JAVA
C++







---------------------

？ while 为什么要输出 next，当前的会被删除吗？？

Hashtable ht = new Hashtable();
ht.put("1", "One");
ht.put("2", "Two");
ht.put("3", "Three");
Enumeration e = ht.keys();
while (e.hasMoreElements()){
	System.out.println(e.nextElement());
}




