public class TestPassByValue {

   public static void main(String[] args) {
      int num1 = 1;
      int num2 = 2;

      System.out.println("Before swap method, num1 is " + num1 + " and num2 is " + num2);

      // 调用swap方法
      swap(num1, num2);
      System.out.println("After swap method, num1 is " + num1 + " and num2 is " + num2);
   }
   /** 交换两个变量的方法 */
   public static void swap(int n1, int n2) {
      System.out.println("\tInside the swap method");
      System.out.println("\t\tBefore swapping n1 is " + n1
                           + " n2 is " + n2);
      // 交换 n1 与 n2的值
      int temp = n1;
      n1 = n2;
      n2 = temp;

      System.out.println("\t\tAfter swapping n1 is " + n1
                           + " n2 is " + n2);
   }
}

以上实例编译运行结果如下：

Before swap method, num1 is 1 and num2 is 2
        Inside the swap method
                Before swapping n1 is 1 n2 is 2
                After swapping n1 is 2 n2 is 1
After swap method, num1 is 1 and num2 is 2

传递两个参数调用swap方法。有趣的是，方法被调用后，实参的值并没有改变。 


？ num1, num2 被当做参数去搞搞震后，本身的值却没有改变，为什么呢？？








------------------------

命令行参数

有时候你希望运行一个程序时候再传递给它消息。这要靠传递命令行参数给main()函数实现。 

命令行参数是在执行程序时候紧跟在程序名字后面的信息。

-- java CommandLine this is a command line 200 -100
-- java CommandLine 就是命令行，this is a command line 200 -100 就是命令行参数；



public class CommandLine {
   public static void main(String args[]){ 
      for(int i=0; i<args.length; i++){
         System.out.println("args[" + i + "]: " + args[i]);
      }
   }
}

如下所示，运行这个程序： 

java CommandLine this is a command line 200 -100
运行结果如下：

args[0]: this
args[1]: is
args[2]: a
args[3]: command
args[4]: line
args[5]: 200
args[6]: -100








------------------------

构造方法

-- 当一个对象被创建时候，构造方法用来初始化该对象。构造方法和它所在类的名字相同，但构造方法没有返回值。 
-- 通常会使用构造方法给一个类的实例变量赋初值，或者执行其它必要的步骤来创建一个完整的对象。 
-- 不管你与否自定义构造方法，所有的类都有构造方法，因为Java自动提供了一个默认构造方法，它把所有成员初始化为0。 
-- 一旦你定义了自己的构造方法，默认构造方法就会失效。 

-- 有点像 js 中的 init() 就是了；







------------------------

可变参数

typeName... parameterName(参数类型... 参数名)
-- 就是长度可以变化的参数；


public class VarargsDemo {

   public static void main(String args[]) {
      // 调用可变参数的方法
      printMax(34, 3, 3, 2, 56.5);
      printMax(new double[]{1, 2, 3});
   }

   public static void printMax( double... numbers) {     // 【core】
   if (numbers.length == 0) {
      System.out.println("No argument passed");
      return;
   }

   double result = numbers[0];

   for (int i = 1; i <  numbers.length; i++)
      if (numbers[i] >  result)
      result = numbers[i];
      System.out.println("The max value is " + result);
   }
}

以上实例编译运行结果如下：

The max value is 56.5
The max value is 3.0








------------------------

finalize() 
-- 垃圾回收之前的操作；

public class FinalizationDemo {  
    public static void main(String[] args) {  
        Cake c1 = new Cake(1);  
        Cake c2 = new Cake(2);  
        Cake c3 = new Cake(3);  
          
        c2 = c3 = null;  
        System.gc(); //调用Java垃圾收集器
    }  
}  
  
class Cake extends Object {  
    private int id;  
    public Cake(int id) {  
        this.id = id;  
        System.out.println("Cake Object " + id + "is created");  
    }  
      
    protected void finalize() throws java.lang.Throwable {  
        super.finalize();    // ？？
        System.out.println("Cake Object " + id + "is disposed");  
    }  
}  

运行以上代码，输出结果如下：

C:\1>java FinalizationDemo  
Cake Object 1is created  
Cake Object 2is created  
Cake Object 3is created  
Cake Object 3is disposed  
Cake Object 2is disposed 








------------------------

// 使用 BufferedReader 在控制台读取字符

import java.io.*;

public class BRRead {
   public static void main(String args[]) throws IOException
   {
      char c;
      // 使用 System.in 创建 BufferedReader 
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));  // 创建一个监听输入的对象；
      System.out.println("Enter characters, 'q' to quit.");
      // 读取字符
      do {
         c = (char) br.read();     // BufferedReader.read
         System.out.println(c);
      } while(c != 'q');
   }
}

以上实例编译运行结果如下:

Enter characters, 'q' to quit.
123abcq
1
2
3
a
b
c
q







------------------------

// 使用 BufferedReader 在控制台读取字符

import java.io.*;
public class BRReadLines {
   public static void main(String args[]) throws IOException
   {
      // 使用 System.in 创建 BufferedReader 
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
      String str;    // str 的输入场景是怎样的？？
      System.out.println("Enter lines of text.");
      System.out.println("Enter 'end' to quit.");
      do {
         str = br.readLine();
         System.out.println(str);
      } while(!str.equals("end"));
   }
}

以上实例编译运行结果如下:

Enter lines of text.
Enter 'end' to quit.
This is line one
This is line one
This is line two
This is line two
end
end






------------------------

控制台输出

-- 在此前已经介绍过，控制台的输出由 print( ) 和println( )完成。这些方法都由类PrintStream 定义，System.out是该类对象的一个引用。 

-- PrintStream 继承了OutputStream类，并且实现了方法write()。这样，write()也可以用来往控制台写操作。 

-- PrintStream 定义write()的最简单格式如下所示：


？ 这些类是什么关系？？








------------------------

import java.io.*;

public class fileStreamTest{

   public static void main(String args[]){
   
   try{
      byte bWrite [] = {11,21,3,40,5};    // ？ 数组好像不是这样定义吧？
      OutputStream os = new FileOutputStream("test.txt");
      for(int x=0; x < bWrite.length ; x++){
         os.write( bWrite[x] ); // writes the bytes
      }
      os.close();
     
      InputStream is = new FileInputStream("test.txt");
      int size = is.available();

      for(int i=0; i< size; i++){
         System.out.print((char)is.read() + "  ");
      }
      is.close();
   }catch(IOException e){
      System.out.print("Exception");
   }	
   }
}
上面的程序首先创建文件test.txt，并把给定的数字以二进制形式写进该文件，同时输出到控制台上。 





------------------------

以下代码实例来解决乱码问题：

//文件名 :fileStreamTest2.java

import java.io.*;

public class fileStreamTest2{
	public static void main(String[] args) throws IOException {
		
		File f = new File("a.txt");
		FileOutputStream fop = new FileOutputStream(f);
		// 构建FileOutputStream对象,文件不存在会自动新建
		
		OutputStreamWriter writer = new OutputStreamWriter(fop, "UTF-8");
		// 构建OutputStreamWriter对象,参数可以指定编码,默认为操作系统默认编码,windows上是gbk
		
		writer.append("中文输入");
		// 写入到缓冲区
		
		writer.append("\r\n");
		//换行
		
		writer.append("English");
		// 刷新缓存冲,写入到文件,如果下面已经没有写入的内容了,直接close也会写入
		
		writer.close();
		//关闭写入流,同时会把缓冲区内容写入文件,所以上面的注释掉
		
		fop.close();
		// 关闭输出流,释放系统资源

		FileInputStream fip = new FileInputStream(f);
		// 构建FileInputStream对象
		
		InputStreamReader reader = new InputStreamReader(fip, "UTF-8");
		// 构建InputStreamReader对象,编码与写入相同

		StringBuffer sb = new StringBuffer();
		while (reader.ready()) {
			sb.append((char) reader.read());
			// 转成char加到StringBuffer对象中
		}
		System.out.println(sb.toString());
		reader.close();
		// 关闭读取流
		
		fip.close();
		// 关闭输入流,释放系统资源

	}
}








------------------------

读取目录

-- 一个目录其实就是一个File对象，它包含其他文件和文件夹。 
-- 如果创建一个File对象并且它是一个目录，那么调用isDirectory( )方法会返回true。 
-- 可以通过调用该对象上的list()方法，来提取它包含的文件和文件夹的列表。 

下面展示的例子说明如何使用list()方法来检查一个文件夹中包含的内容：

import java.io.File;

public class DirList {
   public static void main(String args[]) {
      String dirname = "/tmp";
      File f1 = new File(dirname);
      if (f1.isDirectory()) {
         System.out.println( "Directory of " + dirname);
         String s[] = f1.list();
         for (int i=0; i < s.length; i++) {
            File f = new File(dirname + "/" + s[i]);
            if (f.isDirectory()) {
               System.out.println(s[i] + " is a directory");
            } else {
               System.out.println(s[i] + " is a file");
            }
         }
      } else {
         System.out.println(dirname + " is not a directory");
    }
  }
}

以上实例编译运行结果如下：

Directory of /tmp
bin is a directory
lib is a directory
demo is a directory
test.txt is a file
README is a file
index.html is a file
include is a directory







------------------------

! 看看异常的类；

Throwable

	-> Error 

	-> Exception   检查性异常类

		-> IOException

		-> RuntimeException   运行时异常类










------------------------

下面的例子中声明有两个元素的一个数组，当代码试图访问数组的第三个元素的时候就会抛出一个异常。

// 文件名 : ExcepTest.java
import java.io.*;
public class ExcepTest{

   public static void main(String args[]){
      try{
         int a[] = new int[2];
         System.out.println("Access element three :" + a[3]);
      }catch(ArrayIndexOutOfBoundsException e){
         System.out.println("Exception thrown  :" + e);
      }
      System.out.println("Out of the block");
   }
}

ArrayStoreException： 试图将错误类型的对象存储到一个对象数组时抛出的异常。 

-- 自己在写程序的时候就能预判出现什么异常？








------------------------

如果一个方法没有捕获一个检查性异常，那么该方法必须使用throws 关键字来声明。throws关键字放在方法签名的尾部。 

？ 什么意思，一段程序还必须要有异常检查了？

import java.io.*;

public class className
{
   public void deposit(double amount) throws RemoteException
   {
      // Method implementation
      throw new RemoteException();     // ？ 会出现什么效果？？
   }
   //Remainder of class definition
}






------------------------

？ 写 java 除了写工作条还要写什么？
-- 感觉工作条只是制作一些 json 的数据；








------------------------

？ 异常那章的例子
？？ 自定义的类，不用 import 的咩？





------------------------

？ B 可以访问 A 里面的 private 和 proteceted 不？
-- 通过使用关键字extends，子类可以继承父类的除 private 属性外所有的属性。

// A.java
public class A {
    private int i;
    protected int j;
 
    public void func() {
 
    }
}
 
// B.java
public class B extends A {
}






------------------------

* 我们通过使用instanceof 操作符，能够确定Mammal IS-A Animal

System.out.println(m instanceof Animal);






------------------------

* Implements关键字使用在类继承接口的情况下， 这种情况不能使用关键字extends。

public interface Animal {}

public class Mammal implements Animal{
}

public class Dog extends Mammal{   // 就是这个是错的咯？
}




？ 下面这个实例说明上面是对的；十分奇怪啊...

interface Animal{}

class Mammal implements Animal{}

public class Dog extends Mammal{
   public static void main(String args[]){

      Mammal m = new Mammal();
      Dog d = new Dog();

      System.out.println(m instanceof Animal);
      System.out.println(d instanceof Mammal);
      System.out.println(d instanceof Animal);
   }
} 

以上实例编译运行结果如下：

true
true
true








------------------------

？Java只支持单继承，也就是说，一个类不能继承多个类。
？？ 怎么我记得前面可以多继承？

* 比如：
-- 一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。 
-- public void withdraw(double amount) throws RemoteException, InsufficientFundsException



下面的做法是不合法的：
public class extends Animal, Mammal{} 


Java只支持单继承（继承基本类和抽象类），但是我们可以用接口来实现（多继承接口来实现）,脚本结构如：
public class Apple extends Fruit implements Fruit1, Fruit2{}








------------------------

？ 接口 vs 类？

















