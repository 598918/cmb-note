2. 事件、状态；




？ 四项目感觉有点问题？？

.box {
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-end;
  align-content: space-between;
}




Flex 布局教程：实例篇 - 阮一峰的网络日志
http://www.ruanyifeng.com/blog/2015/07/flex-examples.html






---------------------

* CSS "+" 选择器

** h1 + p {margin-top:50px;}
-- 是选后面的 p， 而不是前面的 h1
这个选择器读作：“选择紧接在 h1 元素后出现的段落，h1 和 p 元素拥有共同的父元素”。



** li + li {font-weight:bold;}
-- 上面这个选择器只会把列表中的第二个和第三个列表项变为粗体。第一个列表项不受影响。





---------------------

【modal】

？ bg- color- 这些怎么影响样式？？


？ 关闭机制？？




---------------------

【transitionEnd】

-- css 提供的方法；







--------

？ 自定义事件 open, opened;

modal.removeClass('modal-out').addClass('modal-in').transitionEnd(function(e) {
	if(modal.hasClass('modal-out')) modal.trigger('closed');
	else modal.trigger('opened');
});

？ 没有按照预期的触发 opened 事件，但是 msui 的可以。
？ 应该是某些地方没有完全调用过来？？是不是 adapter.js 里面有方法没弄过来？




* 两种写法：
-- 第一种可以侦听异步添加的元素；

$(document).on('open','.actions-modal', function () {
	console.log('open event');
});

$('.actions-modal').on('open', function(){
	console.log('open + 1 event');
});



？？ js 的自定义事件是随便写的吗？
-- 只要有 on('xxx') 就可以 trigger('xxx') 了吗？？








---------------------

！ return modal[0];    // modal[0] 应该是个 html ？
-- 输出是个 object，应该是 jquery 对象转成 dom 对象；



！ 集成组件：picker， modal，toast, actionsheet; 
-- 组件之间应该无耦合，只是用了 modal.js 里面的 openModal 和 closeModal;
-- 所以应该抽出来，actionSheet.js + modal.js; 









---------------------

！ actionsheet 是怎么 closeModal 的？
-- if(buttonParams.close !== false) $.closeModal(modal);   // buttonParams.close == undefined, 所以会进入这个分支；
-- (!== false) 就是除了强制设成 false, 其他情况都会打开；
-- 这样看来 !== 的选择范围比较广；


if(clickTarget) {     // label 进不来，所以绑定不了 closeModal 事件
	clickTarget.on('click', function(e) {
		if(buttonParams.close !== false) $.closeModal(modal);
		if(buttonParams.onClick) buttonParams.onClick(modal, e);
	});
}

-- 给 button 绑定事件的时候，除了用户输入的事件，还有隐藏的 closeModal 事件；











---------------------

！ 最后的 sheet 出现应该是 css 动效

.actions-modal {
    position: absolute;
    left: 0;
    bottom: 0;
    z-index: 11000;
    width: 100%; 
    transform: translate3d(0,100%,0);      // 等效于我常用的 display:none;
    &.modal-in {
        transition-duration: @actionsModalDuration;
        transform: translate3d(0,0,0);     // display:block;
    }
    &.modal-out {
        z-index: 11000-1;
        transition-duration: @actionsModalDuration;
        transform: translate3d(0,100%,0);  // display:none;
    }
}














---------------------

* technique：判断 class 元素

if($(el).is(buttonSelector)) clickTarget = $(el);
-- $('.actions-modal-label').is('.actions-modal-button')     // false




* technique：动态绑定事件的方法

if(clickTarget) {
	clickTarget.on('click', function(e) {
		if(buttonParams.close !== false) $.closeModal(modal);
		if(buttonParams.onClick) buttonParams.onClick(modal, e);
	});
}



* technique：回调：

if(typeof cb === 'function') {
	cb.call(this);    // !!!
}





---------------------

？ 组件的原理？
-- 对于：$('xx').plugin(option), jquery 应该做了一些隐藏的动作；
-- 可能是把 $('xx') 做为 this 参数，传递了进来： new beautifer = new Beautifer(this, option);
-- 插件一般都会 return this, 就是把传递进来的参数 option 对 this 做了一些改变，然后把改变后的 this 返回；


？ zepto 的写法类似 jq 的 $.fn.xx, $.xx

$.extend({
	add:function(a,b){
		return a+b;
	}
})

$.add(5,8) //return 13


$.fn.extend({
	clickwhile:function(){
		$(this).click(function(){    // ？？ 我就当 $.fn 都会传一个对象进来好了；
			alert($(this).val()) 
		})
	}
})

$('input').clickwhile();//当点击输入框会弹出该对象的Value值


-- $.extend(obj); 是为了扩展 jquery 本身，为类添加新的方法
-- $.fn.extend(obj); 给 JQUERY对象 添加方法。









---------------------

？ 但是吴老板开发的组件没见写过 extend 啊；

var Plugin = function (element, options)
Plugin.prototype._generateTable = function()

$.fn[pluginName] = function(options, args) {
	var result;
	this.each(function() {
		var _this = $.data(this, pluginName);
		if (typeof options === 'string') {      // 调用插件输出的方法；
			if (!_this) {
				console.error('Not initialized, can not call method : ' + options);
			} else if (!$.isFunction(_this[options]) || options.charAt(0) === '_') {
				console.error('No such method : ' + options);
			} else {
				if (!(args instanceof Array)) {
					args = [ args ];     // 把参数转换成数组类型；因为下面的 apply() 参数要求的是数组；
				}
				result = _this[options].apply(_this, args);        // 调用插件输出的方法；
			}
		}else {
			$.data(this, pluginName, new Plugin(this, $.extend(true, {}, options)));    // 否则用 $.data 新建一个插件，this 我就当时 $.fn 传进来的；
		}
		
	});
	return result || this;  // 输出返回结果或者插件本身
};


-- 吴老板写的插件是 $.fn.plugin = function
-- 跟 $.fn.extend({ plugin: function }) 有点不一样；
-- 应该是对 $.fn 用了 extend() 方法的原因；
-- 其实是一致的。$.fn 是一个对象，extend() 是往对象添加属性方法，$.fn.plugin 是直接添加属性方法；




jQuery 请指出'$'和'$.fn'的区别？或者说出'$.fn'的用途。 - liuhaozcx的专栏 - CSDN博客
http://blog.csdn.net/liuhaozcx/article/details/23861377






---------------------

! width:calc(100% - 2.25rem);
变成： width: calc(97.75%);

不让它编译？
-- 果然 work： calc(~"100% - 15px")






---------------------

！ rem 的大小到底是多少 px？
-- 先简单的理解成 html 的根元素 font-size;


! msui 怎么定义 font-size 的？
-- 不可能是 20px。
-- msui 的 body 定义了 font-size:.85rem; 
-- 17px，真是有毛病的设置；
-- 应该是 .8rem;




---------------------

！ 网页可以双击放大缩小应该是内容有超出；







---------------------

border:1px solid #d9d9d9; 应该可以写成一个类？
@border-default






---------------------

？ 搞清楚 hairline 干嘛的。

* 本例就是添加一条下划线；
-- 其实就是一个方法；

.hairline(@position, @color) when (@position = bottom) {
    &:after {
        content: '';
        position: absolute;
        left: 0;
        bottom: 0;
        right: auto;
        top: auto;
        height: 1px;
        width: 100%;
        background-color: @color;
        display: block;
        z-index: 15;
        transform-origin: 50% 100%;    // 有点奇怪；应该配合 transform 效果来用的；
        @media only screen and (-webkit-min-device-pixel-ratio: 2) {
            transform: scaleY(0.5);
        }
        @media only screen and (-webkit-min-device-pixel-ratio: 3) {
            transform: scaleY(0.33);
        }
    }
}


？ transform: translate3d(0,0,0) scale(1);
-- 这个动效有点搞不清；
-- 应该是 x轴，y轴，z轴转换的值；

transform:translate3d(0,0,0) 是开启硬件加速的；从 cpu 渲染变成 gpu 渲染；

未改进版本的fps（每秒传输帧数，值越高画面就越流畅）一半多的时间都是小于30fps，而改进后的动画fps基本都超过60fps。
当然对于整个效果，楼主css3与jQ动画结合使用，jQ的动画效果比不上CSS3











---------------------

.modal-overlay, .preloader-indicator-overlay, .popup-overlay {
    visibility: hidden;
    opacity: 0;
    ...
    &.modal-overlay-visible {      // 这样就变成可见了； // 表现在 html 上是两个并列的 class
        visibility: visible;
        opacity: 1;
    }
}







--------------------------------

？ 对比下 $.actions 和 $.alert 在绑定弹出框事件上有啥不同？？

？ 感觉 $.actions 里面没有调用 $.modal 比较奇怪？？


-- $.alert 通过 $.modal -> $.openModal(modal) 来弹窗；
-- $.actions 通过 $.openModal(modal) 来弹窗；

-- 其实就是 $.alert 那些多了一个构建 modal 的过程；









--------------------------------

？ bug？？

如果参数只传递一个 cancel 事件，这个方法会把它当成 ok 事件处理？

$.confirm = function (text, title, callbackOk, callbackCancel) {
    if (typeof title === 'function') {
        callbackCancel = arguments[2];
        callbackOk = arguments[1];
        title = undefined;
    }
    return $.modal({
        text: text || '',
        title: typeof title === 'undefined' ? defaults.modalTitle : title,
        buttons: [
            {text: defaults.modalButtonCancel, onClick: callbackCancel},
            {text: defaults.modalButtonOk, bold: true, onClick: callbackOk}
        ]
    });
};






--------------------------------

* $.prompt

-- 定义：$.prompt = function (text, title, callbackOk, callbackCancel)

-- 调用：
-- $.prompt(text, [title, callbackOk, callbackCancel])
-- 或者
-- $.prompt(text, [callbackOk, callbackCancel])



onClick: function (modal, index) {    // 【index】
    if (index === 0 && callbackCancel) callbackCancel($(modal).find('.modal-text-input').val());   // 获取 modal 里面 input 的值；
    if (index === 1 && callbackOk) callbackOk($(modal).find('.modal-text-input').val());
}

modal.find('.modal-button').each(function (index, el) {    【传入】
    $(el).on('click', function (e) {
        if (params.buttons[index].close !== false) $.closeModal(modal);
        if (params.buttons[index].onClick) params.buttons[index].onClick(modal, e);
        if (params.onClick) params.onClick(modal, index);     // 【传入】
    });
});







--------------------------------

function f(a, b, c){
    alert(arguments.length);   // result: "2"
    a = 100;
    alert(arguments[0]);       // result: "100"
    arguments[0] = "qqyumidi";
    alert(a);                  // result: "qqyumidi"
    alert(c);                  // result: "undefined"
    c = 2012;
    alert(arguments[2]);       // result: "undefined"    // 因为 f(1,2) 没有定义 c，所以后面怎么设置 c 都没用；
}

f(1, 2);





--------------------------------

？ js 不能重载，那么下面的方法到底以哪个为准？？

function f(a){
    return a + 10;
}

function f(a){
    return a - 10;
}






--------------------------------

* callee

function count(a){
    if(a==1){
        return 1;
    } 
    return a + arguments.callee(--a);   // ？应该是等价于 count()，有点不确定；
}

var mm = count(10);
alert(mm);








---------------------

css3的字体大小单位[rem]到底好在哪？ - 知乎
https://www.zhihu.com/question/21504656


Flex 布局教程：语法篇 - 阮一峰的网络日志
http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html
